version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: interview-prep-db
    environment:
      POSTGRES_USER: ${DB_USER:-interview_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-interview_pass}
      POSTGRES_DB: ${DB_NAME:-interview_prep}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-interview_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - interview-prep-network

  # Go Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: interview-prep-backend
    environment:
      DATABASE_URL: postgresql://${DB_USER:-interview_user}:${DB_PASSWORD:-interview_pass}@postgres:5432/${DB_NAME:-interview_prep}?sslmode=disable
      PORT: 8080
      NODE_ENV: ${NODE_ENV:-development}
      GIN_MODE: ${GIN_MODE:-debug}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: air
    networks:
      - interview-prep-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8080/api/v1}
    container_name: interview-prep-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8080/api/v1}
    networks:
      - interview-prep-network

  # Nginx Reverse Proxy (optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: interview-prep-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - interview-prep-network
    profiles:
      - production

volumes:
  postgres_data:

networks:
  interview-prep-network:
    driver: bridge 